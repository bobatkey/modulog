module type IFDS_PROGRAM = sig
  type procedure
  type point

  (* intra-procedural edges *)
  edge : point * point

  (* edge from a procedure call to first node in procedure *)
  start_edge : procedure * point

  (* call edge from one procedure to another *)
  call : point * procedure

  (* return (callsite, exitnode, returnnode) *)
  return : point * point * point

  (* set of procedures that are called initially *)
  initial : procedure
end

module type IFDS_PROGRAM_EXT = sig
  type procedure
  type point
  type entry_fact
  type fact

  edge : point * fact * point * fact

  start_edge : procedure * entry_fact * point * fact

  call : point * fact * procedure * entry_fact

  return : point * fact * point * fact * point * fact

  initial : procedure * entry_fact
end

module IFDS_of_Extended = functor (P : IFDS_PROGRAM_EXT) -> struct
  type procedure = P.procedure * P.entry_fact
  type point = P.point * P.fact

  def
   edge : point * point
   edge ((n,s), (n',s')) :- P.edge (n, s, n', s')

  def
    start_edge : procedure * point
    start_edge ((p, ef), (n, s)) :- P.start_edge (p, ef, n, s)

  def
    call : point * procedure
    call ((n, s), (p, ef)) :- P.call (n, s, p, ef)

  def
    return : point * point * point
    return ((nc,sc), (ne, se), (nr, sr)) :- P.return (nc, sc, ne, se, nr, sr)

  def initial : procedure
      initial ((p, ef)) :- P.initial (p, ef)
end

module IFDS = functor (P : IFDS_PROGRAM) -> struct

  def
    intra : P.procedure * P.point
    intra (p, n) :- invoked (p), P.start_edge (p, n)
    intra (p, n) :- intra (p, n'), P.edge (n', n)
    intra (p, n) :- intra (p, n'), callreturn (n', n)

  and
    invoked : P.procedure
    invoked (p) :- P.initial (p)
    invoked (p) :- callsite(n, p)

  and
    callsite : P.point * P.procedure
    callsite (n,p') :- intra (p, n), P.call (n, p')

  and
    callreturn : P.point * P.point
    callreturn(n, n') :- callsite (n, p), intra (p, ne), P.return (n, ne, n')

end

module Test = functor (P : IFDS_PROGRAM_EXT) -> struct
  module P' = IFDS_of_Extended (P)
  module A  = IFDS (P')
end